// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package myjson

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a93d021DecodeParserMyjson(in *jlexer.Lexer, out *TypeCatcher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.EventType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a93d021EncodeParserMyjson(out *jwriter.Writer, in TypeCatcher) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TypeCatcher) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a93d021EncodeParserMyjson(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TypeCatcher) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a93d021EncodeParserMyjson(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TypeCatcher) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a93d021DecodeParserMyjson(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TypeCatcher) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a93d021DecodeParserMyjson(l, v)
}
func easyjson6a93d021DecodeParserMyjson1(in *jlexer.Lexer, out *SlimRepo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a93d021EncodeParserMyjson1(out *jwriter.Writer, in SlimRepo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SlimRepo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a93d021EncodeParserMyjson1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SlimRepo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a93d021EncodeParserMyjson1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SlimRepo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a93d021DecodeParserMyjson1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SlimRepo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a93d021DecodeParserMyjson1(l, v)
}
func easyjson6a93d021DecodeParserMyjson2(in *jlexer.Lexer, out *SlimEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actor":
			(out.Actor).UnmarshalEasyJSON(in)
		case "repo":
			(out.Repo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a93d021EncodeParserMyjson2(out *jwriter.Writer, in SlimEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actor\":"
		out.RawString(prefix[1:])
		(in.Actor).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"repo\":"
		out.RawString(prefix)
		(in.Repo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SlimEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a93d021EncodeParserMyjson2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SlimEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a93d021EncodeParserMyjson2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SlimEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a93d021DecodeParserMyjson2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SlimEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a93d021DecodeParserMyjson2(l, v)
}
func easyjson6a93d021DecodeParserMyjson3(in *jlexer.Lexer, out *SlimActor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a93d021EncodeParserMyjson3(out *jwriter.Writer, in SlimActor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SlimActor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a93d021EncodeParserMyjson3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SlimActor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a93d021EncodeParserMyjson3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SlimActor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a93d021DecodeParserMyjson3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SlimActor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a93d021DecodeParserMyjson3(l, v)
}
func easyjson6a93d021DecodeParserMyjson4(in *jlexer.Lexer, out *Repo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a93d021EncodeParserMyjson4(out *jwriter.Writer, in Repo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Repo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a93d021EncodeParserMyjson4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Repo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a93d021EncodeParserMyjson4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Repo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a93d021DecodeParserMyjson4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Repo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a93d021DecodeParserMyjson4(l, v)
}
func easyjson6a93d021DecodeParserMyjson5(in *jlexer.Lexer, out *Org) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "login":
			out.Login = string(in.String())
		case "gravatar_id":
			out.GravatarID = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a93d021EncodeParserMyjson5(out *jwriter.Writer, in Org) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"gravatar_id\":"
		out.RawString(prefix)
		out.String(string(in.GravatarID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Org) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a93d021EncodeParserMyjson5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Org) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a93d021EncodeParserMyjson5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Org) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a93d021DecodeParserMyjson5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Org) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a93d021DecodeParserMyjson5(l, v)
}
func easyjson6a93d021DecodeParserMyjson6(in *jlexer.Lexer, out *BaseEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "actor":
			(out.Actor).UnmarshalEasyJSON(in)
		case "repo":
			(out.Repo).UnmarshalEasyJSON(in)
		case "payload":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Payload = make(Payload)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Payload)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "public":
			out.Public = bool(in.Bool())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "org":
			if in.IsNull() {
				in.Skip()
				out.Org = nil
			} else {
				if out.Org == nil {
					out.Org = new(Org)
				}
				(*out.Org).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a93d021EncodeParserMyjson6(out *jwriter.Writer, in BaseEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"actor\":"
		out.RawString(prefix)
		(in.Actor).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"repo\":"
		out.RawString(prefix)
		(in.Repo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		if in.Payload == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.Payload {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				if m, ok := v2Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v2Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v2Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.Bool(bool(in.Public))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	if in.Org != nil {
		const prefix string = ",\"org\":"
		out.RawString(prefix)
		(*in.Org).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a93d021EncodeParserMyjson6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a93d021EncodeParserMyjson6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a93d021DecodeParserMyjson6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a93d021DecodeParserMyjson6(l, v)
}
func easyjson6a93d021DecodeParserMyjson7(in *jlexer.Lexer, out *Actor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "login":
			out.Login = string(in.String())
		case "display_login":
			out.DisplayLogin = string(in.String())
		case "gravatar_id":
			out.GravatarID = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "avatar_url":
			out.AvatarURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a93d021EncodeParserMyjson7(out *jwriter.Writer, in Actor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"display_login\":"
		out.RawString(prefix)
		out.String(string(in.DisplayLogin))
	}
	{
		const prefix string = ",\"gravatar_id\":"
		out.RawString(prefix)
		out.String(string(in.GravatarID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"avatar_url\":"
		out.RawString(prefix)
		out.String(string(in.AvatarURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Actor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a93d021EncodeParserMyjson7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Actor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a93d021EncodeParserMyjson7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Actor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a93d021DecodeParserMyjson7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Actor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a93d021DecodeParserMyjson7(l, v)
}
